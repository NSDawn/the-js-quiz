{
    "questions": {
        "0" : {
            "type": "MCQuestion-code",
            "num":"0",
            "prompt": "What is returned by the following function?",
            "code": "const q0 = () => {\n    return [] + {};\n};",
            "choices": [
                "0",
                "'[object Object]'",
                "''",
                "{}"
            ],
            "correctchoice": "'[object Object]'"
        },
        "1" : {
            "type": "MCQuestion-code",
            "num":"1",
            "prompt": "What about this function?",
            "code": "const q1 = () => {\n    return +[];\n};",
            "choices": [
                "0",
                "[]",
                "''",
                "true"
            ],
            "correctchoice": "0"
        },
        "2" : {
            "type": "MCQuestion-code",
            "num":"2",
            "prompt": "What is returned or thrown?",
            "code": "const q2 = () => {\n    let k = true;\n    return k++;\n};",
            "choices": [
                "true",
                "1",
                "2",
                "SyntaxError"
            ],
            "correctchoice": "1"
        },
        "3" : {
            "type": "MCQuestion-code",
            "num":"3",
            "prompt": "What is returned or thrown?",
            "code": "const q3 = () => {\n    return NaN ?? true == NaN;\n}; ",
            "choices": [
                "true",
                "false",
                "NaN",
                "SyntaxError"
            ],
            "correctchoice": "NaN"
        },
        "4" : {
            "type": "MCQuestion-code",
            "num":"4",
            "prompt": "What is returned by the following function?",
            "code": "const q3 = () => {\n   let fs = []\n   let k = 0;\n   for (var i = 0; i < 2; i++) {\n       fs.push(function() { k += i });\n   };\n   fs.forEach((f) => {f()});\n   return k;\n};",
            "choices": [
                "0",
                "1",
                "2",
                "3"
            ],
            "correctchoice": "4"
        },
        "5" : {
            "type": "MCQuestion",
            "num":"5",
            "prompt": "Okay, I admit that one was a little unfair. Now, just pick a color:",
            "code": "",
            "choices": [
                "#55f25f",
                "#f7df1e",
                "#a842b8",
                "#87d0e6"
            ],
            "correctchoice": "#f7df1e"
        },
        "6" : {
            "type": "MCQuestion",
            "num":"6",
            "prompt": "What's returned or thrown?",
            "code": "const q6 = () => {\n    return void 2 == '2';\n};",
            "choices": [
                "undefined",
                "true",
                "false",
                "SyntaxError"
            ],
            "correctchoice": "false"
        },
        "7" : {
            "type": "MCQuestion",
            "num":"7",
            "prompt": "How do JavaScript developers check if a number is odd?",
            "code": "",
            "choices": [
                "modulus operator (%)",
                "write a switch statement",
                "bitwise AND operator (&)",
                "import an npm package"
            ],
            "correctchoice": "import an npm package"
        }, 
        "8" : {
            "type": "MCQuestion",
            "num":"8",
            "prompt": "What's returned or thrown?",
            "code": "const q8 = () => {\n    return let = 10;\n};",
            "choices": [
                "10",
                "undefined",
                "null",
                "SyntaxError"
            ],
            "correctchoice": "10"
        },
        "9" : {
            "type": "MCQuestion",
            "num":"9",
            "prompt": "What is TypeScript?",
            "code": "",
            "choices": [
                "a superset of JavaScript that adds important type safety features",
                "literally Rust",
                "Javascript but variable declarations need to be suffixed with `:any`",
                "blazingly fast üî•üî•üî•"
            ],
            "correctchoice": "Javascript but variable declarations need to be suffixed with `:any`"
        },
        "10" : {
            "type": "MCQuestion",
            "num":"10",
            "prompt": "What's returned?",
            "code": "const q10 = () => {\n    return !+[]+[];\n};",
            "choices": [
                "true",
                "'true'",
                "[]",
                "''"
            ],
            "correctchoice": "'true'"
        },
        "11" : {
            "type": "MCQuestion",
            "num":"11",
            "prompt": "Hmm...",
            "code": "const q11 = () => {\n    return [][];\n};",
            "choices": [
                "undefined",
                "TypeError",
                "ReferenceError",
                "SyntaxError"
            ],
            "correctchoice": "SyntaxError"
        }, 
        "12" : {
            "type": "MCQuestion",
            "num":"12",
            "prompt": "Something broke with JSDL and our customer database got scrambled!",
            "code": "",
            "choices": [
                "Jake added evil comments",
                "Tom's JSON interpreter failed",
                "rm -rf",
                "=="
            ],
            "correctchoice": "Jake added evil comments"
        },
        "13" : {
            "type": "MCQuestion",
            "num":"13",
            "prompt": "Evil bitshifting?",
            "code": "const q13 = () => {\n    return 256 << -!!{};\n};",
            "choices": [
                "0",
                "128",
                "512",
                "SyntaxError"
            ],
            "correctchoice": "0"
        },
        "14" : {
            "type": "MCQuestion",
            "num":"14",
            "prompt": "As easy as 1+1...",
            "code": "const q14 = () => {\n    return 1n + 1;\n};",
            "choices": [
                "2",
                "2n",
                "TypeError",
                "SyntaxError"
            ],
            "correctchoice": "TypeError"
        },  
        "15" : {
            "type": "MCQuestion",
            "num":"15",
            "prompt": "Who is greater?",
            "code": "const q15 = () => {\n    let a = Math.min();\n    let b = Math.max();\n    if (a == b) return null;\n    return a > b;\n};",
            "choices": [
                "null",
                "true",
                "false",
                "TypeError"
            ],
            "correctchoice": "true"
        },
        "16" : {
            "type": "MCQuestion",
            "num":"16",
            "prompt": "Time to do some sums!",
            "code": "const q16 = () => {\n    let m = new Map();\n    m.set   ( 1,  10);\n    m.set   (-1, -30);\n    m.set   ( 0,   2);\n    m.set   ( 1, -12);\n    m.set   ( 2,  20);\n    m.set   ( 3,   7);\n\n    let sum = 1;\n    m.forEach((k, v) => {\n        if (k > 0) sum += v;\n    });\n    return sum;\n};",
            "choices": [
                "-17",
                "1",
                "6",
                "11"
            ],
            "correctchoice": "6"
        },
        "17" : {
            "type": "MCQuestion",
            "num":"17",
            "prompt": "For what input does q17() return true?",
            "code": "const q17 = (v) => {\n    return v == !v;\n};",
            "choices": [
                "[]",
                "{}",
                "new Map()",
                "null"
            ],
            "correctchoice": "[]"
        },
        "18" : {
            "type": "MCQuestion",
            "num":"18",
            "prompt": "What does q18() do?",
            "code": "const q18 = (v) => {\n    return !!parseInt(null, v);\n};",
            "choices": [
                "tests if an input is nullish",
                "tests if an input is greater than 24 and less than 37",
                "tests if an input is NaN",
                "tests if an input is greater than 1610612736"
            ],
            "correctchoice": "tests if an input is greater than 24 and less than 37"
        },
        "19" : {
            "type": "MCQuestion",
            "num":"19",
            "prompt": "More from parseInt()! What is returned by this function?",
            "code": "const q19 = () => {\n    const integers = [\n        0.001, 0.0001, 0.00001, 0.00001, 0.0000001, 0.0000001\n    ];\n\n    return integers.reduce((acc, v) =>\n        {return acc + parseInt(v)},\n        0\n    );\n};",
            "choices": [
                "0",
                "1",
                "2",
                "NaN"
            ],
            "correctchoice": "tests if an input is greater than 24 and less than 37"
        },
        "20" : {
            "type": "MCQuestion",
            "num":"20",
            "prompt": "More from parseInt()! What is returned by this function?",
            "code": "const q20 = () => {\n    const integers = [\n        0.001, 0.0001, 0.00001, 0.00001, 0.0000001, 0.0000001\n    ];\n\n    return integers.reduce((acc, v) =>\n        {return acc + parseInt(v)},\n        0\n    );\n};",
            "choices": [
                "0",
                "1",
                "2",
                "NaN"
            ],
            "correctchoice": "2"
        },
        "21" : {
            "type": "MCQuestion",
            "num":"21",
            "prompt": "I'm making a function ",
            "embedded_choice": "üêà()",
            "prompttail": ", and I'm still not sure what to call it. Which class name wouldn't work?",
            "code": "class üêà {\n    constructor(display_name, breed) {\n        this.display_name = display_name; \n        this.breed = breed;\n    }\n    meow() {\n        console.log(`${this.display_name} says, 'Meow, world!'.`);\n    }\n}",
            "choices": [
                "‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä()",
                "Áå´()",
                "ìÉ†()",
                "ŸÇÿ∑ÿ©()"
            ],
            "correctchoice": "üêà()"
        },
        "22" : {
            "type": "MCQuestion",
            "num":"22",
            "prompt": "Okay, I think I've implemented the class correctly...",
            "code": "const q22 = () => {\n\n    class Áå´ {\n        consturctor(display_name, breed, weight) {\n            this.display_name = display_name;\n            this.weight = parseInt(weight);\n            this.breed = breed;\n        }\n        meow() {\n            console.log(`${this.display_name} says, 'Meow, world!'`)\n        }\n    }\n\n    return new Áå´(2, 'tabby').breed;\n};",
            "choices": [
                "2",
                "'tabby'",
                "undefined",
                "[object Áå´]"
            ],
            "correctchoice": "undefined"
        },
        "23": {
            "type": "MCQuestion",
            "num":"23",
            "prompt": "Always remember to comment your code! Code is ",
            "embedded_choice": "undefined",
            "prompttail": " without comments!",
            "code": "const q23 = () => {\n    // setting i to 1\n    let i = 0;\n\n    // this code decrements i\n    <!-- i++ -->; i++;\n    i++;\n\n    // this is a for loop\n    return i;\n};",
            "choices": [
                "1",
                "2",
                "3",
                "SyntaxError"
            ],
            "correctchoice": "1"
        }

    },
    "titles": {
        "the_js_quiz": "The JS Quiz",
        "lives": "Lives:"
    }
}

